<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" >

    <xacro:include filename="inertial_macros.xacro"/>
    <xacro:include filename="materials.xacro"/>

    <!-- Define robot constants -->
    <xacro:property name="base_width"  value="0.145"/>
    <xacro:property name="base_length" value="0.240"/>
    <xacro:property name="base_height" value="0.060"/>
    <xacro:property name="base_mass"   value="1.500"/>

    <xacro:property name="wheel_radius" value="0.0375"/>
    <xacro:property name="wheel_width"  value="0.035"/>
    <xacro:property name="wheel_ygap"   value="0.025"/>
    <xacro:property name="wheel_zoff"   value="0.010"/>
    <xacro:property name="wheel_xoff"   value="0.085"/>
    <xacro:property name="wheel_mass"   value="0.100"/>

    <xacro:property name="imu_width"  value="0.010"/>
    <xacro:property name="imu_length" value="0.010"/>
    <xacro:property name="imu_height" value="0.008"/>
    <xacro:property name="imu_mass"   value="0.010"/>

    <xacro:property name="lidar_radius" value="0.0375"/>
    <xacro:property name="lidar_width"  value="0.0380"/>
    <xacro:property name="lidar_mass"   value="0.2000"/>

    <xacro:property name="board_1_width"  value="0.060"/>
    <xacro:property name="board_1_length" value="0.080"/>
    <xacro:property name="board_1_height" value="0.015"/>
    <xacro:property name="board_1_mass"   value="0.100"/>

    <xacro:property name="board_2_width"  value="0.060"/>
    <xacro:property name="board_2_length" value="0.090"/>
    <xacro:property name="board_2_height" value="0.025"/>
    <xacro:property name="board_2_mass"   value="0.200"/>

    <!-- Define some commonly used intertial properties  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>      
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />      
        <mass value="${m}"/>
        <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/> 
        </inertial>
    </xacro:macro>

    <!-- BASE LINK -->

    <link name="base_link">

    </link>
    
    <!-- BASE_FOOTPRINT LINK -->

    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <link name="base_footprint">
    </link>


    <!-- CHASSIS LINK -->

    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis"/>
        <origin xyz="-0.135 0 0"/>
    </joint>

    <link name="chassis">
        <visual>
            <origin xyz="0.135 0 0.04"/>
            <geometry>
                <box size="0.27 0.16 0.08"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <origin xyz="0.135 0 0.04"/>
            <geometry>
                <box size="0.27 0.16 0.08"/>
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.5" x="0.27" y="0.16" z="0.08"> 
            <origin xyz="0.135 0 0.04" rpy="0 0 0" />
        </xacro:inertial_box>
    </link>

    <gazebo reference="chassis">
        <material>Gazebo/White</material>
    </gazebo>
    
<!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <mesh filename="file:///workspace/src/my_bot/meshes/omni_wheel.dae" scale="0.325 0.325 0.325"/>
        </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> 
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child  link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>

  </xacro:macro>

  <xacro:wheel prefix="front_left_wheel"  x_reflect="1"  y_reflect="1"  />
  <xacro:wheel prefix="front_right_wheel" x_reflect="1"  y_reflect="-1" />
  <xacro:wheel prefix="rear_left_wheel"   x_reflect="-1" y_reflect="1"  />
  <xacro:wheel prefix="rear_right_wheel"  x_reflect="-1" y_reflect="-1" />

    <link name="imu_link">
    <visual>
      <geometry>
        <box size="${imu_length} ${imu_width} ${imu_height}"/>
      </geometry>
      <material name="Dark Blue">
        <color rgba="0.0 0.0 0.4 1.0"/>
      </material>
    </visual>
    
    <collision>
      <geometry>
        <box size="${imu_length} ${imu_width} ${imu_height}"/>
      </geometry>
    </collision>
      
    <xacro:box_inertia m="${imu_mass}" w="${imu_width}" d="${imu_length}" h="${imu_height}"/>
  </link>
    
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child  link="imu_link"/>
    <origin xyz="0.02 -0.02 ${base_height/2 + 0.02}"/>
  </joint>
    
  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/demo</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
     <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>
   
</robot>
